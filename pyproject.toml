[tool.poetry]
name = "incolume.py.fastapi.crud2"
version = "1.2.0a1"
description = ""
authors = ["Britodfbr <britodfbr@gmail.com>"]
license = "Unlicense"
readme = "README.md"
packages = [{include = "incolume"}]

[tool.poetry.dependencies]
python = "^3.10"
uvicorn = {extras = ["all"], version = "^0.22.0"}
fastapi = {extras = ["all"], version = "^0.95.1"}

[tool.poetry.group.dev.dependencies]
pytest-cov = "^4.0.0"
pytest = "^7.3.1"
black = "<23.3.0"
taskipy = "^1.10.4"
isort = "^5.12.0"
pydocstyle = "^6.3.0"
pylint = "^2.17.3"
tox = "<4.5.1"
mypy = "^1.2.0"
mypy-extensions = "^1.0.0"
safety = "^2.3.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
#log_format = '%(asctime)s %(levelname)s %(message)s'
log_format = '%(asctime)s; %(levelname)-8s; %(name)s; %(module)s; %(funcName)s; %(message)s'
log_date_format ='%FT%T%N%z'
addopts = "--doctest-modules --cov=incolume -sx --cov-report term-missing --cov-report html:coverage_report/html --cov-report xml:coverage_report/cov.xml"
testpaths = [
  "tests",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "webtest: marks tests as webtest (deselect with '-m \"not webtest\"')",
  "fast: marks tests as fast (deselect with '-m \"not fast\"')",
]

[tool.coverage.html]
directory = "coverage_report/html"

[tool.coverage.xml]

[tool.coverage.run]
omit = [
  # omit anything in a .local directory anywhere
  "*/.local/*",
  # omit everything in /usr
  "/usr/*",
  # omit this single file
  "configure/truncus.py",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
  "logger.debug",
  "logger.info",
  "logger.warning",
  "logger.error",
  "ImportError",
  "ModuleNotFoundError",
  "__package__ =",
  "def run",
  "def terminal.",
  "__author__",
  "class IElements"
]

[tool.black]
line-length = 79
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
/(
  ^/foo.py    # exclude a file named foo.py in the root of the project
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.pytest_cache
  | _build
  | buck-out
  | build
  | dist
  | docs
  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data
  | profiling
)/
'''

[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 79

[tool.pylint.basic]
# Allow shorter and longer variable names than the default.
argument-rgx = "[a-z_][a-z0-9_]*$"
attr-rgx = "[a-z_][a-z0-9_]*$"
variable-rgx = "[a-z_][a-z0-9_]*$"

# Ensure that orjson is analysed as a C extension by pylint.
extension-pkg-whitelist = "orjson"

[tool.pylint.messages_control]
disable = [
  # Disable too many and too few checks.
  "too-many-ancestors",
  "too-many-arguments",
  "too-many-boolean-expressions",
  "too-many-branches",
  "too-many-function-args",
  "too-many-instance-attributes",
  "too-many-lines",
  "too-many-locals",
  "too-many-nested-blocks",
  "too-many-public-methods",
  "too-many-return-statements",
  "too-many-statements",
  "too-few-public-methods",

  # Similar lines in files (often the case in tests).
  "duplicate-code",

  # Many functions (e.g. callbacks) will naturally have unused arguments.
  "unused-argument",

  # Disable checking that method could be a function in classes (often used for organisation).
  "no-self-use",

  # Disable failure for TODO items in the codebase (code will always have TODOs).
  "fixme",

  # Disable docstrings checks as we don't require excessive documentation.
  "missing-docstring",

  "no-member",
  "unspecified-encoding",
]


[tool.isort]
multi_line_output = 3
#line_length = 120
include_trailing_comma = true


[tool.tox]
legacy_tox_ini = """
[tox]
minversion = 3.1.0
isolated_build = True
envlist =
    clean
    black
    isort
    pydocstyle
    flake8
    mypy
    pylint
    py36
    py37
    py38
    py39
    py310

;[tox:.package]
;basepython = python3

[testenv]
whitelist_externals = poetry
skip_install = true
commands =
    poetry env use {envpython}
    poetry install -vv --no-root
    poetry run pytest {posargs} tests/ -m \"not(slow or webtest)\"

[testenv:clean]
deps = coverage
commands =
  poetry run coverage erase

[testenv:linters]
commands =
  {[testenv:black]commands}
  {[testenv:isort]commands}
  {[testenv:flake8]commands}
  {[testenv:pydocstyle]commands}
  {[testenv:mypy]commands}
  {[testenv:pylint]commands}

[testenv:stats]
commands = poetry run pytest -xv --cov-report html:coverage_report/html --cov-report xml:coverage_report/cov.xml

[testenv:flake8]
deps = flake8
commands = poetry run flake8 --config pyproject.toml incolumepy/ tests/

[testenv:mypy]
deps =
    mypy
    types-toml
commands = poetry run mypy incolumepy/

[testenv:pydocstyle]
commands = poetry run pydocstyle incolumepy/ tests/

[testenv:isort]
commands = poetry run isort --check --atomic --py all incolumepy/ tests/

[testenv:pylint]
commands = poetry run pylint incolumepy/ tests/

[testenv:black]
commands = poetry run black --check incolumepy/ tests/

[testenv:safety]
commands = poetry run safety check
"""

[tool.taskipy.tasks]
lint_black={help='Checking with black', cmd='poetry run black --check --diff incolume tests'}
lint_isort={help='Checking with isort', cmd='poetry run isort --check --atomic --py all incolume/ tests/'}
lint_mypy={help='Checking with mypy', cmd='poetry run mypy --check incolume tests'}
lint_pydocstyle={help='Checking with pydocstyle', cmd='poetry run pydocstyle incolume/ tests/'}
lint_pylint={help='Checking with pylint', cmd=' poetry run pylint incolume/ tests/'}
pre_lint="task lint_black && task lint_isort && task lint_mypy && task lint_pydocstyle && task lint_pylint"
lint={help='Checking all linters configurated', cmd=''}
prerelease={cmd='v=$(poetry version prerelease) && poetry run pytest && git ci -m "$v" pyproject.toml coverage_report $(find incolume* -name version.txt)', help='poetry version prerelease'}
pre_patch='poetry run task lint'
patch={cmd='v=$(poetry version patch) && poetry run pytest && git ci -m "$v" pyproject.toml coverage_report $(find incolume* -name version.txt)', help='poetry version patch'}
preminor={cmd='v=$(poetry version preminor) && poetry run pytest && git ci -m "$v" pyproject.toml coverage_report $(find incolume* -name version.txt)', help='poetry version preminor'}
premajor={cmd='v=$(poetry version premajor) && poetry run pytest && git ci -m "$v" pyproject.toml coverage_report $(find incolume* -name version.txt)', help='poetry version premajor'}
safety={help='Check safety of packages into project.', cmd='poetry run safety check'}
